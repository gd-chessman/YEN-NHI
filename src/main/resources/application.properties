#server.servlet.context-path=/api

spring.application.name=${APP_NAME:quizcards}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${DBMS_URL:jdbc:mysql://localhost:3306/quizcards_demo_kien_1?createDatabaseIfNotExist=true}
spring.datasource.username=${DBMS_USERNAME:root}
spring.datasource.password=${DBMS_PASSWORD:levanquy}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
server.port=${SERVER_PORT:8080}
spring.mvc.dispatch-options-request=true
jwt.secret=${SECRET_KEY:NSvVSh19hd5XrgwZMhxjwG4hiVKRsn4r14puRZcYTDWqrEvwv7vg7YvvScN6Gzw3Ake9JH}
jwt.jwtExpirationInSec=${AT_EXPIRED:7200}
jwt.refreshTokenExpirationInSec=${RF_EXPIRED:259200}

spring.jpa.properties.hibernate.jdbc.batch_size=100
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true


spring.security.oauth2.client.registration.google.client-id=${OAUTH_CLIENT_ID:99658993125-luuera8v5omv54ne5hjptspubcnc0d2t.apps.googleusercontent.com}
spring.security.oauth2.client.registration.google.client-secret=${OAUTH_CLIENT_SECRET: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}
spring.security.oauth2.client.registration.google.scope=profile, email
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH_URL_REDIRECT:{baseUrl}/login/oauth2/code/{registrationId}}
spring.security.oauth2.client.provider.google.authorization-uri=${OAUTH_AUTHOR_URI:https://accounts.google.com/o/oauth2/auth}
spring.security.oauth2.client.provider.google.token-uri=${OAUTH_TOKEN_URI:https://oauth2.googleapis.com/token}
spring.security.oauth2.client.provider.google.user-info-uri=${OAUTH_USERINFO_URI:https://www.googleapis.com/oauth2/v3/userinfo}
spring.security.oauth2.client.provider.google.user-name-attribute=sub

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=yennhi0402dn@gmail.com
spring.mail.password=d s n j s w a s d k b e p p v t
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.protocol=smtp
spring.mail.smtp.auth=true
spring.mail.smtp.starttls.enable=true
spring.mail.debug=true

stripe.apiKey=${STRIPE_APIKEY_TEST:sk_test_51QR9V3IGukEbv88MpfAaxf3cBMSGkiY4x9pZbz7lkwjqfKEneQJv239u8jmz9eq8RBzSkf0DYi2Hjjyy2ILnOc8900PdPD2RYI}

spring.data.mongodb.uri=${MONGODB_URI:mongodb://localhost:27017/}
spring.data.mongodb.database=${MONGODB_DB:quizcard_db}
spring.data.mongodb.auto-index-creation=true


file.storage.path=${STORAGE_PATH:D:/Downloads}

spring.jackson.serialization.indent-output=true

spring.cloud.compatibility-verifier.enabled=false

spring.notification.email.brevo-url=https://api.brevo.com
spring.notification.email.brevo-api-key=${BREVO_APIKEY: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}


spring.web-push-notifications.public-key=${WEB_PUSH_PUBLIC_KEY:BOxod5fc3ErhmJKDeowVaAe6HKoP-SG2ZFr16XAYmdJ6JZMnmz0FHlY9kGFsyhUGbGunPrLvVZGdWaDCFt_ndxw}
spring.web-push-notifications.private-key=${WEB_PUSH_PRIVATE_KEY:BPqBMm4Jaw3SBaCqgQZm8P0xQR8aVo42Pak7WlUnYnM}

#Kafka
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

# Redis
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=${REDIS_CONNECT_TIMEOUT:60000}
spring.data.redis.lettuce.pool.max-active=${REDIS_POOL_MAX_ACTIVE:8}


app.brevo.template.id-otp=${BREVO_ID_OTP_TEMPLATE:1}
app.brevo.template.id-confirm-link=${BREVO_ID_CONFIRM_LINK:2}
app.email.default-system-email=${EMAIL_SYSTEM:mainfunction1234@gmail.com}
app.email.default-system-name=${NAME_SYSTEM:Quizcards System}

app.max-otp-attemp-mins=2

app.code-security-confirm=${CODE_SECURITY_CONFIRM:woPHNLZtqXDX7SiyysbK3K27A4A6y9TQEAt2d9vz}
app.link-frontend-client=${LINK_FRONTEND_CLIENT:http://localhost:3000/confirm/}
app.code-expire-in-minutes=${CODE_EXPIRE_MINUTES:5}

app.critical-information.confirm-duration-hours=24
app.critical-information.changed-email-after-hours=24

#spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.consumer.group-id=my-group
#spring.kafka.consumer.properties.spring.json.trusted.packages=*